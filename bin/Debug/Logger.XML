<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Logger</name>
    </assembly>
    <members>
        <member name="T:Logger.Appenders.DataBaseAppender">
            <summary>
            Display the log into a database
            A DataBaseAppender matches one and only one data base.
            </summary>
        </member>
        <member name="P:Logger.Appenders.DataBaseAppender.AppenderName">
            <summary>
            Appender name
            </summary>
        </member>
        <member name="P:Logger.Appenders.DataBaseAppender.Layout">
            <summary>
            Log layout
            </summary>
        </member>
        <member name="F:Logger.Appenders.DataBaseAppender.dbManager">
            <summary>
            Database Manager
            </summary>
        </member>
        <member name="F:Logger.Appenders.DataBaseAppender.dbContext">
            <summary>
            Universal context
            </summary>
        </member>
        <member name="M:Logger.Appenders.DataBaseAppender.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Logger.Appenders.DataBaseAppender.AttachDB(DataBase.Database.DbSettings.Interfaces.IDbSettings)">
            <summary>
            Attach a database to the appender
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Logger.Appenders.DataBaseAppender.DoAppend(Logger.Loggers.Log)">
            <summary>
            Appends the log
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:Logger.Appenders.FileAppender">
            <summary>
            File Appender
            </summary>
        </member>
        <member name="P:Logger.Appenders.FileAppender.Layout">
            <summary>
            Layout
            </summary>
        </member>
        <member name="P:Logger.Appenders.FileAppender.AppenderName">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Logger.Appenders.FileAppender.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Logger.Appenders.FileAppender.Path">
            <summary>
            Appender File Path
            </summary>
        </member>
        <member name="P:Logger.Appenders.FileAppender.Type">
            <summary>
            File type
            </summary>
        </member>
        <member name="M:Logger.Appenders.FileAppender.#ctor(System.String)">
            <summary>
            Constructeur
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Logger.Appenders.FileAppender.FilePath(System.String)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.FileAppender.DoAppend(Logger.Loggers.Log)">
            <summary>
            Appends the log
            </summary>
            <param name="log"></param>
        </member>
        <member name="P:Logger.Appenders.FileAppender.Set">
            <summary>
            Initialize the File Appender fluent API
            </summary>
        </member>
        <member name="T:Logger.Appenders.FileAppenderFAPI.FileAppenderFApi">
            <summary>
            File Appender Api
            </summary>
        </member>
        <member name="M:Logger.Appenders.FileAppenderFAPI.FileAppenderFApi.#ctor(Logger.Appenders.FileAppender)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Logger.Appenders.FileAppenderFAPI.FileAppenderFApi.Name(System.String)">
            <summary>
            Sets file's name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.FileAppenderFAPI.FileAppenderFApi.Type(Logger.Utils.FileAppenderType)">
            <summary>
            Sets MySql Database's nama
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.FileAppenderFAPI.FileAppenderFApi.Path(System.String)">
            <summary>
            Sets MySql Database Password
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Logger.Appenders.FileAppenderFAPI.Interfaces.IFileAppenderFApi">
            <summary>
            File Appender Fluent Api
            </summary>
        </member>
        <member name="M:Logger.Appenders.FileAppenderFAPI.Interfaces.IFileAppenderFApi.Type(Logger.Utils.FileAppenderType)">
            <summary>
            File type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.FileAppenderFAPI.Interfaces.IFileAppenderFApi.Name(System.String)">
            <summary>
            File name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.FileAppenderFAPI.Interfaces.IFileAppenderFApi.Path(System.String)">
            <summary>
            File path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Logger.Appenders.MessageBoxAppender">
            <summary>
            Display a log into a MessageBox
            </summary>
        </member>
        <member name="P:Logger.Appenders.MessageBoxAppender.Layout">
            <summary>
            Appender layout
            </summary>
        </member>
        <member name="P:Logger.Appenders.MessageBoxAppender.Box">
            <summary>
            Message box 
            </summary>
        </member>
        <member name="P:Logger.Appenders.MessageBoxAppender.AppenderName">
            <summary>
            Appender's name
            </summary>
        </member>
        <member name="M:Logger.Appenders.MessageBoxAppender.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Logger.Appenders.MessageBoxAppender.DoAppend(Logger.Loggers.Log)">
            <summary>
            Appends the log
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:Logger.Appenders.MessageBoxCustomAppender`1">
            <summary>
            Display logs into a custom message box
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Logger.Appenders.MessageBoxCustomAppender`1.Layout">
            <summary>
            Appender's layout
            </summary>
        </member>
        <member name="P:Logger.Appenders.MessageBoxCustomAppender`1.AppenderName">
            <summary>
            Appender's name
            </summary>
        </member>
        <member name="M:Logger.Appenders.MessageBoxCustomAppender`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Logger.Appenders.MessageBoxCustomAppender`1.DoAppend(Logger.Loggers.Log)">
            <summary>
            Appends the log
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:Logger.Appenders.ToastAppender">
            <summary>
            Display logs into Toast
            </summary>
        </member>
        <member name="P:Logger.Appenders.ToastAppender.AppenderName">
            <summary>
            Appender's name
            </summary>
        </member>
        <member name="P:Logger.Appenders.ToastAppender.Layout">
            <summary>
            Appender's layout
            </summary>
        </member>
        <member name="P:Logger.Appenders.ToastAppender.ToastLayout">
            <summary>
            Toast layout
            </summary>
        </member>
        <member name="M:Logger.Appenders.ToastAppender.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Logger.Appenders.ToastAppender.DoAppend(Logger.Loggers.Log)">
            <summary>
            Appends the log
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:Logger.Appenders.AppenderManager">
            <summary>
            Appender Manager
            </summary>
        </member>
        <member name="F:Logger.Appenders.AppenderManager.appenderList">
            <summary>
            List of appenders.
            </summary>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.#ctor(Logger.Interfaces.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.AddAppender(Logger.Interfaces.IAppender)">
            <summary>
            Add an appender to the list of appenders.
            </summary>
            <param name="appender"></param>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.DetachAppender(Logger.Interfaces.IAppender)">
            <summary>
            Detach an appender from the list of appenders.
            </summary>
            <param name="appender"></param>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.DetachAppender(System.String)">
            <summary>
            Detach an appender from the list of appender from its name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.AddAppender(Logger.Utils.AppenderType,System.String)">
            <summary>
            Create and add an appender to the list of appenders
            if not exists yet.
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.AddAppender(Logger.Utils.AppenderType,System.Type,System.String)">
            <summary>
            Add an appender to the logger
            </summary>
            <param name="type"></param>
            <param name="clazz"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.AddAppender(System.Type,System.String)">
            <summary>
            Add an appender to the logger
            </summary>
            <param name="clazz"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Logger.Appenders.AppenderManager.AppenderList">
            <summary>
            Get the list of appenders.
            </summary>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.CreateAppender(Logger.Utils.AppenderType,System.String)">
            <summary>
            Create a new appender from its type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Appenders.AppenderManager.CreateAppender(Logger.Utils.AppenderType,System.Type,System.String)">
            <summary>
            Create a new appender from its type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Logger.Appenders.ConsoleAppender">
            <summary>
            To display log into the console
            </summary>
        </member>
        <member name="P:Logger.Appenders.ConsoleAppender.AppenderName">
            <summary>
            Name of the appender
            </summary>
        </member>
        <member name="F:Logger.Appenders.ConsoleAppender.DEFAULT_CONSOLE_NAME">
            <summary>
            Default name of the appender
            </summary>
        </member>
        <member name="P:Logger.Appenders.ConsoleAppender.Layout">
            <summary>
            Layout of the appender
            </summary>
        </member>
        <member name="M:Logger.Appenders.ConsoleAppender.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">
            Name of the appender
            </param>
        </member>
        <member name="M:Logger.Appenders.ConsoleAppender.DoAppend(Logger.Loggers.Log)">
            <summary>
            Appends the log
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Logger.Appenders.ConsoleAppender.ResetConsole">
            <summary>
            Reset console parameters
            </summary>
        </member>
        <member name="P:Logger.Interfaces.IAppender.AppenderName">
            <summary>
            Name of the appender
            </summary>
        </member>
        <member name="P:Logger.Interfaces.IAppender.Layout">
            <summary>
            Layout of the appender
            </summary>
        </member>
        <member name="M:Logger.Interfaces.IAppender.DoAppend(Logger.Loggers.Log)">
            <summary>
            Append log
            </summary>
            <param name="log"></param>
        </member>
        <member name="P:Logger.Interfaces.IAppenderManager.AppenderList">
            <summary>
            List of appenders
            </summary>
        </member>
        <member name="M:Logger.Interfaces.IAppenderManager.AddAppender(Logger.Interfaces.IAppender)">
            <summary>
            Add an appender to the list of appenders
            </summary>
            <param name="appender"></param>
        </member>
        <member name="M:Logger.Interfaces.IAppenderManager.DetachAppender(Logger.Interfaces.IAppender)">
            <summary>
            Detach an appender from the list of appenders 
            </summary>
            <param name="appedner"></param>
        </member>
        <member name="M:Logger.Interfaces.IAppenderManager.CreateAppender(Logger.Utils.AppenderType,System.String)">
            <summary>
            Create an appender
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Logger.Interfaces.ILog">
            <summary>
            A log
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILog.Id">
            <summary>
            Log's id
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILog.Message">
            <summary>
            Log's message
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILog.Timestamp">
            <summary>
            Log's timestamp
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILog.LoggerName">
            <summary>
            Logger's name
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILog.Level">
            <summary>
            Log level
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILog.Exception">
            <summary>
            Log's exception stacktrace
            </summary>
        </member>
        <member name="T:Logger.Interfaces.ILogger">
            <summary>
            A logger
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILogger.Id">
            <summary>
            Logger' id
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILogger.Name">
            <summary>
            Logger's name
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILogger.LoggerManager">
            <summary>
            Logger's manager
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILogger.Level">
            <summary>
            Logger's level
            </summary>
        </member>
        <member name="P:Logger.Interfaces.ILogger.Parent">
            <summary>
            Parent's logger
            </summary>
        </member>
        <member name="M:Logger.Interfaces.ILogger.DeepCopy">
            <summary>
            Allow to duplicate a logger
            </summary>
            <returns></returns>
        </member>
        <member name="T:Logger.Loggers.ILoggerLog">
            <summary>
            Logger's methods
            Inspired from org.slf4j.Logger interface.
            </summary>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Log(System.String)">
            <summary>
            Log a log with log level
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Log(System.String,System.Exception)">
            <summary>
            Log a log with log level
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Error(System.String)">
            <summary>
            Logs a log with error level
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Error(System.String,System.Exception)">
            <summary>
            Logs a log with error level
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Info(System.String)">
            <summary>
            Logs a log with info level
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Info(System.String,System.Exception)">
            <summary>
            Logs a log with info level
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Warn(System.String)">
            <summary>
            Logs a log with warn level
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Warn(System.String,System.Exception)">
            <summary>
            Logs a log with warn level
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Debug(System.String)">
            <summary>
            Logs a log with debug level
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Debug(System.String,System.Exception)">
            <summary>
            Logs a log with debug level
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Trace(System.String)">
            <summary>
            Logs a log with trace level
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.Trace(System.String,System.Exception)">
            <summary>
            Logs a log with trace level
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.isDebugEnabled">
            <summary>
            True if debug level is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.isErrorEnabled">
            <summary>
            True if error level is enabled
            </summary>
            <returns></returns>                    
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.isInfoEnabled">
            <summary>
            True if info level is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.isTraceEnabled">
            <summary>
            True if trace level is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.ILoggerLog.isWarnEnabled">
            <summary>
            True if warn level is enabled
            </summary>
            <returns></returns>
        </member>
        <member name="T:Logger.Loggers.Log">
            <summary>
            A log
            </summary>
        </member>
        <member name="P:Logger.Loggers.Log.Id">
            Add an id ?
        </member>
        <member name="P:Logger.Loggers.Log.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:Logger.Loggers.Log.Timestamp">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="P:Logger.Loggers.Log.LoggerName">
            <summary>
            Logger's name
            </summary>
        </member>
        <member name="P:Logger.Loggers.Log.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="P:Logger.Loggers.Log.ThreadId">
            <summary>
            Thread's id
            </summary>
        </member>
        <member name="P:Logger.Loggers.Log.Clazz">
            <summary>
            logger's class
            </summary>
        </member>
        <member name="P:Logger.Loggers.Log.Level">
            <summary>
            Log's level
            </summary>
        </member>
        <member name="M:Logger.Loggers.Log.#ctor(Logger.Interfaces.ILogger,System.String,Logger.Utils.Level,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="logger"></param>
            <param name="msg"></param>
            <param name="logAlerte"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.Log.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Logger.Loggers.Logger">
            <summary>
            A Logger.
            </summary>
        </member>
        <member name="P:Logger.Loggers.Logger.Parent">
            <summary>
            Parent logger
            </summary>
        </member>
        <member name="P:Logger.Loggers.Logger.Id">
            <summary>
            Logger's Id
            </summary>
        </member>
        <member name="P:Logger.Loggers.Logger.Name">
            <summary>
            The name of this logger.
            </summary>
        </member>
        <member name="P:Logger.Loggers.Logger.Level">
            <summary>
            The assigned levelInt of this logger.
            Can be null.
            If null, a level is inherited from a parent.
            </summary>
        </member>
        <member name="P:Logger.Loggers.Logger.LoggerManager">
            <summary>
            The logger Manager
            </summary>
        </member>
        <member name="P:Logger.Loggers.Logger.AppenderManager">
            <summary>
            List of appenders.
            </summary>
        </member>
        <member name="M:Logger.Loggers.Logger.#ctor(System.String,Logger.Utils.Level,Logger.Loggers.LoggerManager)">
            <summary>
            Private constructor.
            Use LoggerFactory to get a new instance of a logger.
            </summary>
        </member>
        <member name="M:Logger.Loggers.Logger.AddAppender(Logger.Utils.AppenderType,System.String)">
            <summary>
            Add an appender from AppenderType.
            </summary>
        </member>
        <member name="M:Logger.Loggers.Logger.AddAppender(Logger.Utils.AppenderType,System.Type,System.String)">
            <summary>
            Add an appender from AppenderType.
            </summary>
        </member>
        <member name="M:Logger.Loggers.Logger.AddAppender(System.Type,System.String)">
            <summary>
            Add an appender from a custom IAppender implementation.
            </summary>		l
        </member>
        <member name="M:Logger.Loggers.Logger.Reset">
            <summary>
            Reset the logger appanders
            </summary>
        </member>
        <member name="M:Logger.Loggers.Logger.CallAppenders(Logger.Loggers.Log)">
            <summary>
            Call the appender from the logger
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Log(System.String)">
            <summary>
            Log a log with a message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Log(System.String,System.Exception)">
            <summary>
            Log a log with message and exception
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Error(System.String)">
            <summary>
            Log a log error with message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Error(System.String,System.Exception)">
            <summary>
            Log a log error with message and exception
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Info(System.String)">
            <summary>
            Log a log info with message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Info(System.String,System.Exception)">
            <summary>
            Log a log info with message and exception
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Warn(System.String)">
            <summary>
            Log a warn log with message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Warn(System.String,System.Exception)">
            <summary>
            Log a warn log with message and exception
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Debug(System.String)">
            <summary>
            Log a log debug with message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Debug(System.String,System.Exception)">
            <summary>
            Log a log debug with message and exception
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Trace(System.String)">
            <summary>
            Log a log trace with message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.Trace(System.String,System.Exception)">
            <summary>
            Log a log trace with message and exception
            </summary>
            <param name="msg"></param>
            <param name="e"></param>
        </member>
        <member name="M:Logger.Loggers.Logger.isDebugEnabled">
            <summary>
            To be implemented
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.Logger.isErrorEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.Logger.isInfoEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.Logger.isTraceEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.Logger.isWarnEnabled">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.Logger.DeepCopy">
            <summary>
            Make a deep copy of the logger
            </summary>
            <returns></returns>
        </member>
        <member name="M:Logger.Loggers.LoggerManager.GetLogger(System.String)">
            <summary>
            Get a logger from its name.
            Return null if any logger found with this name.
            </summary>	
        </member>
        <member name="M:Logger.Loggers.LoggerManager.CreateLogger(System.String,Logger.Utils.Level,System.Type)">
            <summary>
            Create a ROOT logger from the class in parameter.
            The class must implement ILogger interface.
            </summary>
        </member>
        <member name="M:Logger.Loggers.LoggerManager.DuplicateLogger(System.String)">
            <summary>
            Duplicate an existing logger.
            Return null if the source logger doesn't exist.
            </summary>
        </member>
        <member name="M:Logger.Loggers.LoggerManager.Delete(System.String)">
            <summary>
            Delete a logger from the list of loggers
            </summary>
            <param name="name"></param>
            <returns>true if success, false otherwise</returns>
        </member>
        <member name="M:Logger.Loggers.LoggerManager.MakeLog(Logger.Interfaces.ILogger,System.String,Logger.Utils.Level,System.Exception)">
            <summary>
            Create a new Log
            </summary>
            <param name="logger"></param>
            <param name="msg"></param>
            <param name="logAlerte"></param>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Logger.Layout.LogElements">
            <summary>
            Elements of a logger
            </summary>
        </member>
        <member name="F:Logger.Layout.LogElements.TIMESTAMP">
            <summary>
            Timestamp
            </summary>
        </member>
        <member name="F:Logger.Layout.LogElements.LEVEL">
            <summary>
            Level
            </summary>
        </member>
        <member name="F:Logger.Layout.LogElements.LOGGER_NAME">
            <summary>
            Logger name
            </summary>
        </member>
        <member name="F:Logger.Layout.LogElements.MESSAGE">
            <summary>
            Message
            </summary>
        </member>
        <member name="F:Logger.Layout.LogElements.EXCEPTION">
            <summary>
            Exception
            </summary>
        </member>
        <member name="T:Logger.Layout.MessageBoxCustom">
            <summary>
            Custom Message box example
            </summary>
            <summary>
            MessageBoxCustom
            </summary>
        </member>
        <member name="M:Logger.Layout.MessageBoxCustom.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Logger.Layout.MessageBoxCustom.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Logger.Layout.ModalBox">
            <summary>
            Represent a windows Message Box
            </summary>
        </member>
        <member name="P:Logger.Layout.ModalBox.Icon">
            <summary>
            Icon
            </summary>
        </member>
        <member name="P:Logger.Layout.ModalBox.Buttons">
            <summary>
            Buttons
            </summary>
        </member>
        <member name="M:Logger.Layout.ModalBox.#ctor(System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            
            </summary>
            <param name="caption"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
        </member>
        <member name="M:Logger.Layout.ModalBox.#ctor(System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Constructor
            </summary>
            <param name="caption"></param>
            <param name="buttons"></param>
        </member>
        <member name="M:Logger.Layout.ModalBox.#ctor(System.String,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Constructor
            </summary>
            <param name="caption"></param>
            <param name="icon"></param>
        </member>
        <member name="M:Logger.Layout.ModalBox.#ctor(System.String)">
            <summary>
            Construcctor
            </summary>
            <param name="caption"></param>
        </member>
        <member name="M:Logger.Layout.ModalBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Logger.Layout.ModalBox.HasIcon">
            <summary>
            Checks if has icon
            </summary>
        </member>
        <member name="M:Logger.Layout.ModalBox.setAction(System.Windows.Forms.DialogResult,System.Action)">
            <summary>
            Set an action to a button
            </summary>
            <param name="buttonName"></param>
            <param name="doAction"></param>
        </member>
        <member name="P:Logger.Layout.ModalBox.ButtonAction">
            <summary>
            Dictionnary of buttons and their actions
            </summary>
        </member>
        <member name="T:Logger.Layout.ToastLayout">
            <summary>
            Represent a toast
            </summary>
        </member>
        <member name="P:Logger.Layout.ToastLayout.Template">
            <summary>
            Toast's template
            </summary>
        </member>
        <member name="P:Logger.Layout.ToastLayout.ToastXml">
            <summary>
            Toast xml
            </summary>
        </member>
        <member name="P:Logger.Layout.ToastLayout.Caption">
            <summary>
            Toast's caption
            </summary>
        </member>
        <member name="P:Logger.Layout.ToastLayout.Elements">
            <summary>
            List of the toast's elements
            </summary>
        </member>
        <member name="M:Logger.Layout.ToastLayout.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="elem1"></param>
            <param name="elem2"></param>
            <param name="elem3"></param>
        </member>
        <member name="M:Logger.Layout.ToastLayout.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="elem1"></param>
            <param name="elem2"></param>
        </member>
        <member name="M:Logger.Layout.ToastLayout.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="caption"></param>
        </member>
        <member name="M:Logger.Layout.ToastLayout.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Logger.Utils.FileAppenderType">
            <summary>
            File type extension
            </summary>
        </member>
        <member name="F:Logger.Utils.FileAppenderType.JSON">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:Logger.Utils.FileAppenderType.YAML">
            <summary>
            Yaml
            </summary>
        </member>
        <member name="F:Logger.Utils.FileAppenderType.XML">
            <summary>
            Xml
            </summary>
        </member>
        <member name="F:Logger.Utils.FileAppenderType.BINARY">
            <summary>
            Binary
            </summary>
        </member>
        <member name="F:Logger.Utils.FileAppenderType.CSV">
            <summary>
            Csv
            </summary>
        </member>
        <member name="F:Logger.Utils.FileAppenderType.CHARACTER">
            <summary>
            Character
            </summary>
        </member>
        <member name="F:Logger.Utils.FileAppenderType.TEXT">
            <summary>
            Text
            </summary>
        </member>
        <member name="T:Logger.Utils.Level">
            <summary>
            Levels
            </summary>
        </member>
        <member name="F:Logger.Utils.Level.TRACE">
            <summary>
            Trace level
            </summary>
        </member>
        <member name="F:Logger.Utils.Level.DEBUG">
            <summary>
            Debug level
            </summary>
        </member>
        <member name="F:Logger.Utils.Level.INFO">
            <summary>
            Info level
            </summary>
        </member>
        <member name="F:Logger.Utils.Level.WARN">
            <summary>
            Warn level
            </summary>
        </member>
        <member name="F:Logger.Utils.Level.ERROR">
            <summary>
            Error level
            </summary>
        </member>
        <member name="F:Logger.Utils.Level.LOG">
            <summary>
            Log level
            </summary>
        </member>
        <member name="T:Logger.Utils.LoggerUtils">
            <summary>
            Logger Utils
            </summary>
        </member>
        <member name="M:Logger.Utils.LoggerUtils.IsALoggerName(System.Collections.Generic.List{Logger.Interfaces.ILogger},System.String)">
            <summary>
            Tests if a logger with the given name already exists
            </summary>
            <param name="list"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Utils.LoggerUtils.IsAnAppenderName(System.Collections.Generic.SynchronizedCollection{Logger.Interfaces.IAppender},System.String)">
            <summary>
            Tests if an appender with the given name already exixts
            </summary>
            <param name="list"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Logger.Utils.AppenderType">
            <summary>
            Types of appenders
            </summary>
        </member>
        <member name="F:Logger.Utils.AppenderType.NONE">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Logger.Utils.AppenderType.CONSOLE">
            <summary>
            Console appender
            </summary>
        </member>
        <member name="F:Logger.Utils.AppenderType.MESSAGE_BOX">
            <summary>
            Message box appender
            </summary>
        </member>
        <member name="F:Logger.Utils.AppenderType.MESSAGE_BOX_CUSTOM">
            <summary>
            Custom message box appender
            </summary>
        </member>
        <member name="F:Logger.Utils.AppenderType.TOAST">
            <summary>
            Toast appender
            </summary>
        </member>
        <member name="F:Logger.Utils.AppenderType.DATABASE">
            <summary>
            Database appender
            </summary>
        </member>
        <member name="F:Logger.Utils.AppenderType.FILE">
            <summary>
            File appender
            </summary>
        </member>
        <member name="T:Logger.Utils.LogPatternConstants">
            <summary>
            Log pattern Constants
            </summary>
        </member>
        <member name="F:Logger.Utils.LogPatternConstants.DEFAULT_PATTERN">
            <summary>
            Default log pattern
            </summary>
        </member>
        <member name="T:Logger.Utils.LogPatterns">
            <summary>
            Log Patterns
            </summary>
        </member>
        <member name="M:Logger.Utils.LogPatterns.Reformate(System.String,Logger.Interfaces.ILog)">
            <summary>
            Reformate a log from its elements
            </summary>
            <param name="pattern"></param>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:Logger.Utils.LogPatterns.BuildXmlTemplate(Windows.Data.Xml.Dom.XmlDocument,System.Collections.Generic.List{System.String},Logger.Interfaces.ILog)">
            <summary>
            Build the toast xml template
            </summary>
            <param name="toastXml"></param>
            <param name="lines"></param>
            <param name="log"></param>
        </member>
        <member name="M:Logger.Utils.LogPatterns.StrRef(Logger.Layout.LogElements,System.String)">
            <summary>
            Method to formate log pattern from its elements
            </summary>
            <param name="elem"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:Logger.Utils.ObjectCopier">
            <summary>
            Reference Article http://www.codeproject.com/KB/tips/SerializedObjectCloner.aspx
            Provides a method for performing a deep copy of an object.
            Binary Serialization is used to perform the copy.
            </summary>
        </member>
        <member name="M:Logger.Utils.ObjectCopier.Clone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:Logger.Utils.StringValueAttribute">
            <summary>
            This attribute is used to represent a string value
            for a value in an enum.
            </summary>
        </member>
        <member name="P:Logger.Utils.StringValueAttribute.StringValue">
            <summary>
            Holds the stringvalue for a value in an enum.
            </summary>
        </member>
        <member name="M:Logger.Utils.StringValueAttribute.#ctor(System.String)">
            <summary>
            Constructor used to init a StringValue Attribute
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Logger.Utils.EnumString">
            <summary>
            Enum String
            </summary>
        </member>
        <member name="M:Logger.Utils.EnumString.GetStringValue(System.Enum)">
            <summary>
            Will get the string value for a given enums value, this will
            only work if you assign the StringValue attribute to
            the items in your enum.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
